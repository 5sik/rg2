from __future__ import annotations
import rg2.bin._rg2
import typing
import numpy

__all__ = ["CVecEnv", "NormalSampler", "UnitEnv"]

class CVecEnv:
    def __getstate__(self) -> tuple: ...
    def __init__(self, resourceDir: str, cfg: str) -> None: ...
    def __setstate__(self, arg0: tuple) -> None: ...
    def close(self) -> None: ...
    def curriculumUpdate(self) -> None: ...
    def getActionDim(self) -> int: ...
    def getNumOfEnvs(self) -> int: ...
    def getObDim(self) -> int: ...
    def getObStatistics(
        self, arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: float
    ) -> None: ...
    def init(self) -> None: ...
    def isTerminalState(self, arg0: numpy.ndarray) -> None: ...
    def observe(self, arg0: numpy.ndarray, arg1: bool) -> None: ...
    def reset(self) -> None: ...
    def rewardInfo(self) -> typing.List[typing.Dict[str, float]]: ...
    def setControlTimeStep(self, arg0: float) -> None: ...
    def setObStatistics(
        self, arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: float
    ) -> None: ...
    def setSeed(self, arg0: int) -> None: ...
    def setSimulationTimeStep(self, arg0: float) -> None: ...
    def startRecordingVideo(self, arg0: str) -> None: ...
    def step(
        self, arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: numpy.ndarray
    ) -> None: ...
    def stopRecordingVideo(self) -> None: ...
    def turnOffVisualization(self) -> None: ...
    def turnOnVisualization(self) -> None: ...
    pass

class NormalSampler:
    def __init__(self, dim: int) -> None: ...
    def sample(
        self,
        arg0: numpy.ndarray,
        arg1: numpy.ndarray,
        arg2: numpy.ndarray,
        arg3: numpy.ndarray,
    ) -> None: ...
    def seed(self, arg0: int) -> None: ...
    pass

class UnitEnv:
    def __init__(self, resourceDir: str, cfg: str, visualizable: bool) -> None: ...
    def close(self) -> None: ...
    def curriculumUpdate(self) -> None: ...
    def getActionDim(self) -> int: ...
    def getObDim(self) -> int: ...
    def init(self) -> None: ...
    def isTerminalState(self, arg0: float) -> bool: ...
    def observe(self, arg0: numpy.ndarray) -> None: ...
    def reset(self) -> None: ...
    def setControlTimeStep(self, arg0: float) -> None: ...
    def setSeed(self, arg0: int) -> None: ...
    def setSimulationTimeStep(self, arg0: float) -> None: ...
    def startRecordingVideo(self, arg0: str) -> None: ...
    def step(self, arg0: numpy.ndarray) -> float: ...
    def stopRecordingVideo(self) -> None: ...
    def turnOffVisualization(self) -> None: ...
    def turnOnVisualization(self) -> None: ...
    pass
